concurrency:
  cancel-in-progress: true
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
jobs:
  build:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Check out code
      uses: actions/checkout@v3
    - continue-on-error: true
      if: matrix.target == 'php'
      name: Checkout antlr PHP runtime
      uses: actions/checkout@v3
      with:
        path: runtime/PHP
        repository: antlr/antlr-php-runtime
    - continue-on-error: true
      if: matrix.target == 'php'
      name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        extensions: mbstring
        php-version: '8.3'
        tools: composer
    - continue-on-error: true
      env:
        COMPOSER_CACHE_DIR: ${{ github.workspace }}/.cache
      if: matrix.target == 'php'
      name: Install dependencies
      run: 'cd runtime/PHP

        composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader'
    - continue-on-error: true
      if: startswith(matrix.os, 'ubuntu')
      name: Install dependencies (Ubuntu)
      run: 'sudo apt-get update -qq

        sudo apt install -y ninja-build

        '
    - continue-on-error: true
      if: startswith(matrix.os, 'macos')
      name: Install dependencies (MacOS)
      run: brew install ninja
    - continue-on-error: true
      id: setup-java
      name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: zulu
        java-version: 11
    - continue-on-error: true
      if: steps.setup-java.outputs.cache-hit != 'true'
      name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.5
    - continue-on-error: true
      if: startswith(matrix.os, 'windows') && (matrix.target == 'cpp')
      name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - continue-on-error: true
      if: matrix.target == 'python3'
      name: Set up Python 3
      uses: actions/setup-python@v4
      with:
        architecture: x64
        python-version: 3.x
    - continue-on-error: true
      if: (matrix.target == 'javascript') || (matrix.target == 'typescript')
      name: Set up Node 16
      uses: actions/setup-node@v3.6.0
      with:
        node-version: '16'
    - continue-on-error: true
      if: matrix.target == 'csharp'
      name: Setup Dotnet
      uses: actions/setup-dotnet@v3.0.3
      with:
        dotnet-version: 7.0.x
    - continue-on-error: true
      if: matrix.target == 'dart'
      name: Setup Dart 2.12.1
      uses: dart-lang/setup-dart@v1.3
      with:
        sdk: 2.12.1
    - continue-on-error: true
      if: matrix.target == 'go'
      name: Setup Go 1.19
      uses: actions/setup-go@v3.3.1
      with:
        go-version: ^1.19
    - continue-on-error: true
      if: matrix.target == 'swift'
      name: Setup Swift
      uses: swift-actions/setup-swift@v1.19.0
      with:
        swift-version: '5.2'
    - continue-on-error: true
      if: (startswith(matrix.os, 'macos') || startswith(matrix.os, 'ubuntu')) && (matrix.target
        == 'cpp')
      name: Use ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}
    - continue-on-error: true
      if: startswith(matrix.os, 'ubuntu') && (matrix.target == 'cpp')
      name: Configure shell (Ubuntu)
      run: echo 'PATH=/usr/lib/ccache:'"$PATH" >> $GITHUB_ENV
    - continue-on-error: true
      if: startswith(matrix.os, 'macos') && (matrix.target == 'cpp')
      name: Configure shell (MacOS)
      run: echo "PATH=$(brew --prefix)/opt/ccache/libexec:$PATH" >> $GITHUB_ENV
    - continue-on-error: true
      name: Build ANTLR with Maven
      run: mvn install -DskipTests=true -Darguments="-Dmaven.javadoc.skip=true" -B
        -V
    - continue-on-error: true
      if: matrix.target == 'tool'
      name: Test tool
      run: 'cd tool-testsuite

        mvn test

        '
    - continue-on-error: true
      env:
        CMAKE_GENERATOR: Ninja
      if: startsWith(matrix.os, 'windows') && (matrix.target != 'tool')
      name: Test runtime (Windows)
      run: "gci env:* | sort-object name\n\ncd runtime-testsuite\nswitch (\"${{ matrix.target\
        \ }}\")\n{\n  python3 { mvn -X '-Dantlr-python3-exec=\"${{ env.pythonLocation\
        \ }}\\python.exe\"' '-Dtest=python3.**' test }\n  default { mvn -X '-Dtest=${{\
        \ matrix.target }}.**' test }\n}\n"
    - continue-on-error: true
      if: (startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos'))  &&
        (matrix.target != 'tool')
      name: Test runtime (non-Windows)
      run: "env\n\ncd runtime-testsuite\ncase ${{ matrix.target }} in\n  python3)\
        \ mvn -X '-Dantlr-python3-exec=${{ env.pythonLocation }}/bin/python' '-Dtest=python3.**'\
        \ test ;;\n  *) mvn -X '-Dtest=${{ matrix.target }}.**' test ;;\nesac\n"
    - continue-on-error: true
      if: always()
      name: Prepare artifacts
      run: 'cd ${{ github.workspace }}/..

        tar czfp antlr_${{ matrix.os }}_${{ matrix.target }}.tgz --exclude=''.git''
        antlr4

        mv antlr_${{ matrix.os }}_${{ matrix.target }}.tgz ${{ github.workspace }}/.

        '
    - continue-on-error: true
      if: always()
      name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: antlr_${{ matrix.os }}_${{ matrix.target }}
        path: antlr_${{ matrix.os }}_${{ matrix.target }}.tgz
    strategy:
      fail-fast: false
      matrix:
        exclude:
        - os: windows-2022
          target: swift
        os:
        - macos-12
        - ubuntu-20.04
        - windows-2022
        target:
        - tool
        - cpp
        - csharp
        - dart
        - go
        - java
        - javascript
        - typescript
        - php
        - python3
  cpp-lib-build:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: startswith(matrix.os, 'ubuntu')
      name: Install dependencies (Ubuntu)
      run: 'sudo apt-get update -qq

        sudo apt install -y ninja-build

        '
    - continue-on-error: true
      if: startswith(matrix.os, 'macos')
      name: Install dependencies (MacOS)
      run: brew install ninja
    - continue-on-error: true
      if: (matrix.compiler == 'clang') && !startswith(matrix.os, 'macos')
      name: Setup Clang
      uses: egor-tensin/setup-clang@v1
      with:
        cygwin: 0
        platform: x64
        version: 13
    - continue-on-error: true
      name: Check out code
      uses: actions/checkout@v3
    - continue-on-error: true
      if: startswith(matrix.os, 'macos') || startswith(matrix.os, 'ubuntu')
      name: Use ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.os }}-${{ matrix.compiler }}
    - continue-on-error: true
      if: startswith(matrix.os, 'ubuntu')
      name: Configure shell (Ubuntu)
      run: echo 'PATH=/usr/lib/ccache:'"$PATH" >> $GITHUB_ENV
    - continue-on-error: true
      if: startswith(matrix.os, 'macos')
      name: Configure shell (MacOS)
      run: echo "PATH=$(brew --prefix)/opt/ccache/libexec:$PATH" >> $GITHUB_ENV
    - continue-on-error: true
      if: startswith(matrix.os, 'windows')
      name: Build (Windows)
      run: "call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\\
        VC\\Auxiliary\\Build\\vcvars64.bat\"\n\nif \"${{ matrix.compiler }}\" EQU\
        \ \"cl\" (\n  set CC=cl\n  set CXX=cl\n  echo 'CC=cl' >> $GITHUB_ENV\n  echo\
        \ 'CXX=cl' >> $GITHUB_ENV\n) else (\n  set CC=clang\n  set CXX=clang++\n \
        \ echo 'CC=clang' >> $GITHUB_ENV\n  echo 'CXX=clang++' >> $GITHUB_ENV\n)\n\
        \nset\nwhere cmake && cmake --version\nwhere ninja && ninja --version\nwhere\
        \ %CC% && %CC% -version\nwhere %CXX% && %CXX% -version\n\ncd runtime/Cpp\n\
        \ncmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DANTLR_BUILD_CPP_TESTS=OFF -DCMAKE_UNITY_BUILD=${{\
        \ matrix.unity_build }} -DCMAKE_UNITY_BUILD_BATCH_SIZE=20 -S . -B out/Debug\n\
        if %errorlevel% neq 0 exit /b %errorlevel%\n\ncmake --build out/Debug -j %NUMBER_OF_PROCESSORS%\n\
        if %errorlevel% neq 0 exit /b %errorlevel%\n\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Release\
        \ -DANTLR_BUILD_CPP_TESTS=OFF -S . -B out/Release\nif %errorlevel% neq 0 exit\
        \ /b %errorlevel%\n\ncmake --build out/Release -j %NUMBER_OF_PROCESSORS%\n\
        if %errorlevel% neq 0 exit /b %errorlevel%\n"
      shell: cmd
    - continue-on-error: true
      if: startswith(matrix.os, 'macos') || startswith(matrix.os, 'ubuntu')
      name: Build (non-Windows)
      run: "if [ \"${{matrix.compiler}}\" == \"clang\" ]; then\n  export CC=clang\n\
        \  export CXX=clang++\n  echo 'CC=clang' >> $GITHUB_ENV\n  echo 'CXX=clang++'\
        \ >> $GITHUB_ENV\nelse\n  export CC=gcc\n  export CXX=g++\n  echo 'CC=gcc'\
        \ >> $GITHUB_ENV\n  echo 'CXX=g++' >> $GITHUB_ENV\nfi\n\nenv\nwhich cmake\
        \ && cmake --version\nwhich ninja && ninja --version\nwhich $CC && $CC --version\n\
        which $CXX && $CXX --version\n\ncd runtime/Cpp\n\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Debug\
        \ -DANTLR_BUILD_CPP_TESTS=OFF -DCMAKE_UNITY_BUILD=${{ matrix.unity_build }}\
        \ -DCMAKE_UNITY_BUILD_BATCH_SIZE=20 -S . -B out/Debug\ncmake --build out/Debug\
        \ --parallel\n\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DANTLR_BUILD_CPP_TESTS=OFF\
        \ -S . -B out/Release\ncmake --build out/Release --parallel\n"
    - continue-on-error: true
      if: always()
      name: Prepare artifacts
      run: 'cd ${{ github.workspace }}/..

        tar czfp antlr_${{ matrix.os }}_${{ matrix.compiler }}.tgz --exclude=''.git''
        antlr4

        mv antlr_${{ matrix.os }}_${{ matrix.compiler }}.tgz ${{ github.workspace
        }}/.

        '
    - continue-on-error: true
      if: always()
      name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: antlr_${{ matrix.os }}_${{ matrix.compiler }}
        path: antlr_${{ matrix.os }}_${{ matrix.compiler }}.tgz
    strategy:
      fail-fast: false
      matrix:
        compiler:
        - clang
        - gcc
        exclude:
        - compiler: gcc
          os: windows-2022
        include:
        - compiler: cl
          os: windows-2022
        os:
        - macos-12
        - ubuntu-20.04
        - windows-2022
        unity_build:
        - ON
        - OFF
name: antlr4
on:
  repository_dispatch:
    types: trigger-ga___hosted.yml
permissions:
  contents: read
